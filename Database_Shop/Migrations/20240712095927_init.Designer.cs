// <auto-generated />
using System;
using Database_Shop.DB.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database_Shop.Migrations
{
    [DbContext(typeof(ShopDB))]
    [Migration("20240712095927_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Database_Shop.Entity.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<bool>("Promo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Article");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Article 1",
                            Price = 50,
                            Promo = false,
                            Stock = 10
                        },
                        new
                        {
                            Id = 2,
                            Name = "Article 2",
                            Price = 30,
                            Promo = true,
                            Stock = 5
                        },
                        new
                        {
                            Id = 3,
                            Name = "Article 3",
                            Price = 75,
                            Promo = false,
                            Stock = 20
                        });
                });

            modelBuilder.Entity("Database_Shop.Entity.ArticleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArticleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ArticleCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            ArticleId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            Id = 3,
                            ArticleId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            Id = 4,
                            ArticleId = 3,
                            CategoryId = 3
                        });
                });

            modelBuilder.Entity("Database_Shop.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Catégorie 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Catégorie 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Catégorie 3"
                        });
                });

            modelBuilder.Entity("Database_Shop.Entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SentAt = new DateTime(2023, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "En cours",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SentAt = new DateTime(2023, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Livré",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SentAt = new DateTime(2023, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "En cours",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Database_Shop.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("TEXT")
                        .HasColumnName("City")
                        .HasComment("Ville");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("TEXT")
                        .HasColumnName("Country")
                        .HasComment("Pays");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("PhoneNumber")
                        .HasComment("Numéro de téléphone");

                    b.Property<int>("PostalCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0)
                        .HasColumnName("PostalCode")
                        .HasComment("Code postal");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("StreetName")
                        .HasComment("Nom de rue");

                    b.Property<int>("StreetNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0)
                        .HasColumnName("StreetNumber")
                        .HasComment("Numéro de rue");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Addresses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Charleroi",
                            Country = "Belgique",
                            PhoneNumber = "",
                            PostalCode = 6000,
                            StreetName = "rue de la Force",
                            StreetNumber = 10,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Lille",
                            Country = "France",
                            PhoneNumber = "0687654321",
                            PostalCode = 69001,
                            StreetName = "rue des fous",
                            StreetNumber = 5,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            City = "Nismes",
                            Country = "Belgique",
                            PhoneNumber = "",
                            PostalCode = 5670,
                            StreetName = "rue longue",
                            StreetNumber = 5,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Database_Shop.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Mdp")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MdpConfirm")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Pseudo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Mail = "admin@mail.be",
                            Mdp = "Test1234*",
                            MdpConfirm = "Test1234*",
                            Pseudo = "user1",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Mail = "user@mail.be",
                            Mdp = "Test1234*",
                            MdpConfirm = "Test1234*",
                            Pseudo = "user",
                            Role = "User"
                        },
                        new
                        {
                            Id = 3,
                            Mail = "user2@mail.be",
                            Mdp = "Test1234*",
                            MdpConfirm = "Test1234*",
                            Pseudo = "user2",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("Database_Shop.Entity.Article", b =>
                {
                    b.HasOne("Database_Shop.Entity.Order", null)
                        .WithMany("Articles")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("Database_Shop.Entity.ArticleCategory", b =>
                {
                    b.HasOne("Database_Shop.Entity.Article", "Article")
                        .WithMany("ArticleCategories")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database_Shop.Entity.Category", "Category")
                        .WithMany("ArticleCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Database_Shop.Entity.Order", b =>
                {
                    b.HasOne("Database_Shop.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database_Shop.Models.Address", b =>
                {
                    b.HasOne("Database_Shop.Models.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("Database_Shop.Models.Address", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database_Shop.Entity.Article", b =>
                {
                    b.Navigation("ArticleCategories");
                });

            modelBuilder.Entity("Database_Shop.Entity.Category", b =>
                {
                    b.Navigation("ArticleCategories");
                });

            modelBuilder.Entity("Database_Shop.Entity.Order", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Database_Shop.Models.User", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
